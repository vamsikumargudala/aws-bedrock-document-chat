#!/bin/bash

# Setup script for Terraform backend resources (S3 bucket and DynamoDB table)
# Run this once before initializing Terraform

set -e

# Configuration - modify these as needed
PROJECT_PREFIX="${PROJECT_PREFIX:-personal}"
ENVIRONMENT="${ENVIRONMENT:-dev}"
AWS_REGION="${AWS_REGION:-us-east-1}"

# Derived names using the same convention as locals.tf
BUCKET_NAME="${PROJECT_PREFIX}-${ENVIRONMENT}-terraform-state"
DYNAMODB_TABLE="${PROJECT_PREFIX}-${ENVIRONMENT}-terraform-locks"

echo "Setting up Terraform backend resources..."
echo "Region: $AWS_REGION"
echo "S3 Bucket: $BUCKET_NAME"
echo "DynamoDB Table: $DYNAMODB_TABLE"
echo ""

# Create S3 bucket for Terraform state
echo "Creating S3 bucket..."
if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
    echo "Bucket $BUCKET_NAME already exists"
else
    aws s3api create-bucket \
        --bucket "$BUCKET_NAME" \
        --region "$AWS_REGION" \
        $(if [ "$AWS_REGION" != "us-east-1" ]; then echo "--create-bucket-configuration LocationConstraint=$AWS_REGION"; fi)

    # Enable versioning
    aws s3api put-bucket-versioning \
        --bucket "$BUCKET_NAME" \
        --versioning-configuration Status=Enabled

    # Enable encryption
    aws s3api put-bucket-encryption \
        --bucket "$BUCKET_NAME" \
        --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'

    # Block public access
    aws s3api put-public-access-block \
        --bucket "$BUCKET_NAME" \
        --public-access-block-configuration \
        "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

    echo "S3 bucket created successfully"
fi

# Create DynamoDB table for state locking
echo ""
echo "Creating DynamoDB table..."
if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "$AWS_REGION" 2>/dev/null; then
    echo "Table $DYNAMODB_TABLE already exists"
else
    aws dynamodb create-table \
        --table-name "$DYNAMODB_TABLE" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region "$AWS_REGION" \
        --tags "Key=Project,Value=$PROJECT_PREFIX" "Key=Environment,Value=$ENVIRONMENT" "Key=ManagedBy,Value=Terraform"

    echo "Waiting for table to be active..."
    aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region "$AWS_REGION"
    echo "DynamoDB table created successfully"
fi

# Generate backend.tf file
echo ""
echo "Generating backend.tf file..."
cat > backend.tf <<EOF
# Auto-generated backend configuration
# Generated by setup-backend.sh on $(date)

bucket         = "$BUCKET_NAME"
key            = "rag/terraform.tfstate"
region         = "$AWS_REGION"
dynamodb_table = "$DYNAMODB_TABLE"
encrypt        = true
EOF

echo "backend.tf file created"

echo ""
echo "Backend setup complete!"
echo ""
echo "To initialize Terraform with this backend, run:"
echo "  terraform init -backend-config=backend.tf"
echo ""
echo "Or you can initialize with command line flags:"
echo "  terraform init \\"
echo "    -backend-config=\"bucket=$BUCKET_NAME\" \\"
echo "    -backend-config=\"key=rag/terraform.tfstate\" \\"
echo "    -backend-config=\"region=$AWS_REGION\" \\"
echo "    -backend-config=\"dynamodb_table=$DYNAMODB_TABLE\" \\"
echo "    -backend-config=\"encrypt=true\""